cmake_minimum_required(VERSION 3.6)
project(google)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(
        SOURCE_FILES
        main.cpp leetcode/004_median-of-two-sorted-arrays.cpp leetcode/031_next-permutation.cpp leetcode/042_trapping-rain-water.cpp leetcode/054_spiral_matrix.cpp leetcode/056_merge-intervals.cpp leetcode/057_insert-interval.cpp leetcode/066_plus-one.cpp leetcode/128_longest-consecutive-sequence.cpp leetcode/142_linked-list-cycle-II.cpp test/for_loop.cpp leetcode/162_find-peak-element.cpp leetcode/163_missing-ranges.cpp test/strings.cpp leetcode/228_summary-ranges.cpp leetcode/259_3sum-smaller.cpp leetcode/001_two-sum.cpp leetcode/167_two-sum-ii-input-array-is-sorted.cpp leetcode/170_two-sum-iii-data-structure-design.cpp leetcode/015_3sum.cpp leetcode/016_3sum-closest.cpp leetcode/018_4sum.cpp leetcode/454_4sum-ii.cpp leetcode/280_wiggle-sort.cpp leetcode/324_wiggle-sort-ii.cpp leetcode/289_game-of-life.cpp leetcode/380_insert-delete-getrandom-o1.cpp leetcode/166_fraction-to-recurring-decimal.cpp leetcode/338_counting-bits.cpp leetcode/005_longest-palindromic-substring.cpp leetcode/006_zigzag-conversion.cpp leetcode/003_longest-substring-without-repeating-characters.cpp leetcode/007_reverse-integer.cpp leetcode/008_string-to-integer-atoi.cpp leetcode/009_palindrome-number.cpp leetcode/012_integer-to-roman.cpp "leetcode/013_roman-to-integer.cpp" leetcode/014_longest-common-prefix.cpp leetcode/019_remove-nth-node-from-end-of-list.cpp leetcode/029_divide-two-integers.cpp leetcode/030_substring-with-concatenation-of-all-words.cpp leetcode/032_longest-valid-parentheses.cpp leetcode/035_search-insert-position.cpp leetcode/036_valid-sudoku.cpp leetcode/037_sudoku-solver.cpp leetcode/038_count-and-say.cpp leetcode/041_first-missing-positive.cpp leetcode/055_jump-game.cpp leetcode/045_jump-game-ii.cpp leetcode/048_rotate-image.cpp leetcode/051_n-queens.cpp leetcode/052_n-queens-ii.cpp leetcode/058_length-of-last-word.cpp leetcode/061_rotate-list.cpp leetcode/062_unique-paths.cpp leetcode/063_unique-paths-ii.cpp leetcode/064_minimum-path-sum.cpp leetcode/070_climbing-stairs.cpp leetcode/080_remove-duplicates-from-sorted-array-ii.cpp leetcode/081_search-in-rotated-sorted-array-ii.cpp leetcode/083_remove-duplicates-from-sorted-list.cpp leetcode/082_remove-duplicates-from-sorted-list-ii.cpp leetcode/086_partition-list.cpp leetcode/089_gray-code.cpp leetcode/092_reverse-linked-list-ii.cpp leetcode/093_restore-ip-addresses.cpp leetcode/094_binary-tree-inorder-traversal.cpp leetcode/096_unique-binary-search-trees.cpp leetcode/095_unique-binary-search-trees-ii.cpp leetcode/100_same-tree.cpp leetcode/103_binary-tree-zigzag-level-order-traversal.cpp leetcode/107_binary-tree-level-order-traversal-ii.cpp leetcode/108_convert-sorted-array-to-binary-search-tree.cpp leetcode/109_convert-sorted-list-to-binary-search-tree.cpp leetcode/110_balanced-binary-tree.cpp leetcode/111_minimum-depth-of-binary-tree.cpp leetcode/112_path-sum.cpp leetcode/113_path-sum-ii.cpp leetcode/114_flatten-binary-tree-to-linked-list.cpp leetcode/118_pascals-triangle.cpp leetcode/119_pascals-triangle-ii.cpp leetcode/120_triangle.cpp leetcode/129_sum-root-to-leaf-numbers.cpp leetcode/130_surrounded-regions.cpp leetcode/131_palindrome-partitioning.cpp leetcode/134_gas-station.cpp leetcode/137_single-number-ii.cpp leetcode/141_linked-list-cycle.cpp leetcode/143_reorder-list.cpp leetcode/145_binary-tree-postorder-traversal.cpp leetcode/147_insertion-sort-list.cpp
        prototype/singly-linked-list.cpp
        prototype/sort.cpp
        prototype/traverse.cpp
        prototype/trie.cpp
        prototype/bst.cpp
        prototype/compare.cpp
        prototype/lexicographical.cpp
        prototype/topologicalSort.cpp
        test/integers.cpp
        mianJing_google/bt-longest-path.cpp
        mianjing_fb/bipartite_graph.cpp
        leetcode/148_sort-list.cpp leetcode/151_reverse-words-in-a-string.cpp leetcode/152_maximum-product-subarray.cpp leetcode/153_find-minimum-in-rotated-sorted-array.cpp leetcode/156_binary-tree-upside-down.cpp leetcode/160_intersection-of-two-linked-lists.cpp leetcode/165_compare-version-numbers.cpp leetcode/169_majority-element.cpp leetcode/171_excel-sheet-column-number.cpp leetcode/172_factorial-trailing-zeroes.cpp leetcode/179_largest-number.cpp leetcode/186_reverse-words-in-a-string-ii.cpp leetcode/187_repeated-dna-sequences.cpp leetcode/189_rotate-array.cpp leetcode/190_reverse-bits.cpp leetcode/198_house-robber.cpp leetcode/199_binary-tree-right-side-view.cpp leetcode/201_bitwise-and-of-numbers-range.cpp leetcode/202_happy-number.cpp leetcode/204_count-primes.cpp leetcode/205_isomorphic-strings.cpp leetcode/213_house-robber-ii.cpp leetcode/217_contains-duplicate.cpp leetcode/219_contains-duplicate-ii.cpp leetcode/220_contains-duplicate-iii.cpp leetcode/222_count-complete-tree-nodes.cpp leetcode/223_rectangle-area.cpp leetcode/225_implement-stack-using-queues.cpp leetcode/226_invert-binary-tree.cpp leetcode/227_basic-calculator-ii.cpp leetcode/229_majority-element-ii.cpp leetcode/232_implement-queue-using-stacks.cpp leetcode/241_different-ways-to-add-parentheses.cpp leetcode/242_valid-anagram.cpp leetcode/243_shortest-word-distance.cpp leetcode/244_shortest-word-distance-ii.cpp leetcode/245_shortest-word-distance-iii.cpp leetcode/250_count-univalue-subtrees.cpp leetcode/254_factor-combinations.cpp leetcode/255_verify-preorder-sequence-in-binary-search-tree.cpp leetcode/256_paint-house.cpp leetcode/258_add-digits.cpp leetcode/260_single-number-iii.cpp leetcode/268_missing-number.cpp leetcode/287_find-the-duplicate-number.cpp leetcode/290_word-pattern.cpp leetcode/292_nim-game.cpp leetcode/299_bulls-and-cows.cpp leetcode/300_longest-increasing-subsequence.cpp leetcode/309_best-time-to-buy-and-sell-stock-with-cooldown.cpp leetcode/318_maximum-product-of-word-lengths.cpp leetcode/325_maximum-size-subarray-sum-equals-k.cpp leetcode/306_additive-number.cpp leetcode/307_range-sum-query-mutable.cpp prototype/segment_tree.cpp mainjing_2sigma/hash-table.cpp leetcode/342_power-of-four.cpp leetcode/295_find-median-from-data-stream.cpp mainjing_2sigma/number-stream.cpp mainjing_2sigma/random-weight.cpp leetcode/319_bulb-switcher.cpp leetcode/322_coin-change.cpp leetcode/328_odd-even-linked-list.cpp leetcode/333_largest-bst-subtree.cpp leetcode/337_house-robber-iii.cpp leetcode/339_nested-list-weight-sum.cpp leetcode/343_integer-break.cpp leetcode/344_reverse-string.cpp leetcode/349_intersection-of-two-arrays.cpp leetcode/350_intersection-of-two-arrays-ii.cpp leetcode/150_evaluate-reverse-polish-notation.cpp leetcode/127_word-ladder.cpp leetcode/101_symmetric-tree.cpp leetcode/126_word-ladder-ii.cpp leetcode/239_sliding-window-maximum.cpp leetcode/355_design-twitter.cpp leetcode/387_first-unique-character-in-a-string.cpp leetcode/396_rotate-function.cpp leetcode/414_third-maximum-number.cpp leetcode/438_find-all-anagrams-in-a-string.cpp leetcode/208_implement-trie-prefix-tree.cpp leetcode/212_word-search-ii.cpp prototype/ac-algorithm.cpp leetcode/460_lfu-cache.cpp leetcode/146_lru-cache.cpp test/multiMap.cpp leetcode/480_sliding-window-median.cpp leetcode/386_lexicographical-numbers.cpp leetcode/556_next-greater-element-iii.cpp leetcode/582_kill-process.cpp leetcode/669_trim-a-binary-search-tree.cpp leetcode/416_partition-equal-subset-sum.cpp leetcode/164_maximum-gap.cpp leetcode/412_fizz-buzz.cpp leetcode/503_next-greater-element-ii.cpp leetcode/496_next-greater-element-i.cpp leetcode/547_friend-circles.cpp leetcode/534_design-tinyurl.cpp mianJing_bb/valid-parentheses.cpp leetcode/236_lowest-common-ancestor-of-a-binary-tree.cpp mianJing_bb/lowest-common-ancestor-of-a-binary-tree.cpp leetcode/200_number-of-islands.cpp mianJing_ebay/number-of-islands.cpp mianJing_ebay/word-break.cpp leetcode/139_word-break.cpp mianJing_ebay/top-k-frequent-elements.cpp mianJing_ebay/reverse-words-in-a-string.cpp mianJing_ebay/lowest-common-ancestor-of-a-binary-tree.cpp mianJing_ebay/linked-list-cycle.cpp leetcode/034_search-for-a-range.cpp mianJing_ebay/search-for-a-range.cpp leetcode/459_repeated-substring-pattern.cpp mianJing_ebay/repeated-substring-pattern.cpp mianJing_ebay/excel-sheet-column-title.cpp mianJing_ebay/palindrome.cpp leetcode/125_valid-palindrome.cpp leetcode/102_binary-tree-level-order-traversal.cpp mianJing_ebay/binary-tree-traversal.cpp leetcode/144_binary-tree-preorder-traversal.cpp mianJing_ebay/validate-bst.cpp leetcode/033_search-in-rotated-sorted-array.cpp mianJing_ebay/search-in-rotated-sorted-array.cpp mianJing_ebay/insert-interval.cpp mianJing_ebay/ugly-number-ii.cpp leetcode/264_ugly-number-ii.cpp leetcode/173_binary-search-tree-iterator.cpp mianJing_ebay/bst-iterator.cpp mianJing_ebay/min-stack.cpp leetcode/155_min-stack.cpp leetcode/215_kth-largest-element-in-an-array.cpp mianJing_ebay/kth-largest-element-in-an-array.cpp mianJing_ebay/jump-game.cpp mianJing_ebay/longest-consecutive-sequence.cpp mianJing_ebay/largest-number.cpp leetcode/088_merge-sorted-array.cpp mianJing_ebay/merge-sorted-array.cpp mianJing_ebay/majority-element.cpp leetcode/078_subsets.cpp mianJing_ebay/subsets.cpp mianJing_ebay/valid-anagram.cpp mianJing_ebay/partition-equal-subset-sum.cpp leetcode/285_inorder-successor-in-bst.cpp mianJing_ebay/bst-inorder-successor.cpp leetcode/560_subarray-sum-equals-k.cpp mianJing_ebay/subarray-sum-equals-k.cpp leetcode/572_subtree-of-another-tree.cpp mianJing_ebay/longest-substring-without-repeating-characters.cpp leetcode/381_insert-delete-getrandom-o1-duplicates-allowed.cpp mianJing_bb/merge-sorted-array.cpp mianJing_bb/two-sum.cpp mianJing_bb/reorder-list.cpp leetcode/206_reverse-linked-list.cpp mianJing_bb/lru.cpp mianJing_bb/find-peak-element.cpp leetcode/098_validate-binary-search-tree.cpp mianJing_bb/validate-bst.cpp leetcode/023_merge-k-sorted-lists.cpp mianJing_bb/merge-k-sorted-lists.cpp leetcode/121_best-time-to-buy-and-sell-stock.cpp mianJing_bb/best-time-to-buy-and-sell-stock.cpp leetcode/024_swap-nodes-in-pairs.cpp mianJing_bb/swap-nodes-in-pairs.cpp mianJing_bb/largest-number.cpp leetcode/002_add-two-numbers.cpp leetcode/445_add-two-numbers-ii.cpp leetcode/283_move-zeroes.cpp leetcode/049_group-anagrams.cpp leetcode/138_copy-list-with-random-pointer.cpp leetcode/021_merge-two-sorted-lists.cpp leetcode/116_populating-next-right-pointers-in-each-node.cpp leetcode/117_populating-next-right-pointers-in-each-node-ii.cpp leetcode/091_decode-ways.cpp leetcode/253_meeting-rooms-ii.cpp leetcode/463_island-perimeter.cpp leetcode/104_maximum-depth-of-binary-tree.cpp leetcode/384_shuffle-an-array.cpp leetcode/450_delete-node-in-a-bst.cpp leetcode/468_validate-ip-address.cpp leetcode/017_letter-combinations-of-a-phone-number.cpp leetcode/297_serialize-and-deserialize-binary-tree.cpp leetcode/046_permutations.cpp leetcode/269_alien-dictionary.cpp mianJing_twitter/alien-dictionary.cpp leetcode/286_walls-and-gates.cpp mianJing_twitter/walls-and-gates.cpp leetcode/136_single-number.cpp mianJing_twitter/single-number.cpp mianJing_twitter/lru-lfu.cpp leetcode/341_flatten-nested-list-iterator.cpp mianJing_twitter/flatten-nested-list-iterator.cpp mianJing_twitter/insert-interval.cpp mianJing_twitter/minStack-maxStack.cpp leetcode/323_number-of-connected-components-in-an-undirected-graph.cpp mianJing_twitter/number-of-connected-components-in-an-undirected-graph.cpp mianJing_twitter/friend-circles.cpp mianJing_twitter/3sum.cpp leetcode/079_word-search.cpp mianJing_twitter/word-search.cpp mianJing_twitter/evaluate-reverse-polish-notation.cpp leetcode/362_design-hit-counter.cpp mianJing_twitter/design-hit-counter.cpp mianJing_twitter/count-primes.cpp mianJing_twitter/implement-queue-using-stacks.cpp mianJing_twitter/word-break.cpp mianJing_twitter/fizz-buzz.cpp mianJing_twitter/construct-binary-tree-from-preorder-inorder-postorder-traversal.cpp leetcode/347_top-k-frequent-elements.cpp mianJing_twitter/top-k-frequent-elements.cpp leetcode/224_basic-calculator.cpp mianJing_twitter/permutations.cpp leetcode/047_permutations-ii.cpp leetcode/060_permutation-sequence.cpp mianJing_twitter/unique-paths.cpp mianJing_twitter/permutation-in-string.cpp mianJing_twitter/most-frequent-element.cpp mianJing_twitter/longest-valid-parentheses.cpp leetcode/044_wildcard-matching.cpp leetcode/371_sum-of-two-integers.cpp leetcode/237_delete-node-in-a-linked-list.cpp leetcode/011_container-with-most-water.cpp leetcode/020_valid-parentheses.cpp leetcode/191_number-of-1-bits.cpp)
#add_executable(google ${SOURCE_FILES} leetcode/004_median-of-two-sorted-arrays.cpp)
add_executable(google ${SOURCE_FILES})